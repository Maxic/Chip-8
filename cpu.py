class Cpu:
    def __init__(self):
        # memory 4kb
        self.memory = [0] * 4096

        # data registers (8-bit)
        self.V = [0] * 16

        # address register (16-bit)
        self.I = 0

        # timers (8-bit)
        self.delay = 0
        self.sound = 0

        # program counter, 0x000 to 0x1FF is reserved for internal use (16-bit)
        self.pc = 0x200

        # stack pointer (8-bit) and stack (16-bit)
        self.sp = 0
        self.stack = [0] * 16

        # initialize some sprites in memory
        self.sprites = [
            0xF0, 0x90, 0x90, 0x90, 0xF0,  # Zero
            0x20, 0x60, 0x20, 0x20, 0x70,  # One
            0xF0, 0x10, 0xF0, 0x80, 0xF0,  # Two
            0xF0, 0x10, 0xF0, 0x10, 0xF0,  # Three
            0x90, 0x90, 0xF0, 0x10, 0x10,  # Four
            0xF0, 0x80, 0xF0, 0x10, 0xF0,  # Five
            0xF0, 0x80, 0xF0, 0x90, 0xF0,  # Six
            0xF0, 0x10, 0x20, 0x40, 0x40,  # Seven
            0xF0, 0x90, 0xF0, 0x90, 0xF0,  # Eight
            0xF0, 0x90, 0xF0, 0x10, 0xF0,  # Nine
            0xF0, 0x90, 0xF0, 0x90, 0x90,  # A
            0xE0, 0x90, 0xE0, 0x90, 0xE0,  # B
            0xF0, 0x80, 0x80, 0x80, 0xF0,  # C
            0xE0, 0x90, 0x90, 0x90, 0xE0,  # D
            0xF0, 0x80, 0xF0, 0x80, 0xF0,  # E
            0xF0, 0x80, 0xF0, 0x80, 0x80   # F
        ]
        for x in range(0x00, 0x50):
            self.memory[0x96+x] = self.sprites[x]

    # fetch an opcode from two bytes
    def fetch_opcode(self, hexvalue):
        byte1 = self.memory[hexvalue]
        byte2 = self.memory[hexvalue+1]
        opcode = byte1 << 8
        opcode = opcode | byte2
        return opcode